//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""BattleControls"",
            ""id"": ""1db84e50-5168-4a2c-aff7-afdf03e160fe"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""df5f6ce5-065f-4a11-b7b7-e783cdb1ff06"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""88051469-6fd0-429a-83c9-6f3362a91023"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Throw"",
                    ""type"": ""Button"",
                    ""id"": ""399f3205-2440-4626-80bd-1cda1debcc98"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Use"",
                    ""type"": ""Button"",
                    ""id"": ""18b3ae9c-fb57-4eef-827d-da4ba79188fc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LookRotation"",
                    ""type"": ""Value"",
                    ""id"": ""8380b6df-f71c-4943-a430-35dbeea234b6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LookRotationController"",
                    ""type"": ""Value"",
                    ""id"": ""acc1a482-cfa0-4984-8545-12821d675f6f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""05801e60-24eb-4969-b458-13ff2fa70e8e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a87ec203-096a-4360-83c0-9891f63228bf"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""72981183-9f91-437e-a165-8fc6b7b35778"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9eea178b-ff12-47f3-976a-cd03ec1c16b3"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""9ab0d7cb-1fec-4da3-9d75-4a17296de903"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""b81fd144-3a27-4ff4-b921-340c3b5a814a"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8e5f93c8-f907-4c17-8563-ddd5463a2db4"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2ce36956-effe-4067-a75f-94178ccf84a6"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""64eaa7fd-fbbd-4f52-ae82-aec416021bd9"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b44349de-a1c4-47b5-954f-5efa90cc1f9f"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Use"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""13a12367-f3f6-4af2-975b-7c37aa0e3aa7"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""39c9b6ba-695c-4d2d-a266-3b43ebb72d0d"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""LookRotationController"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // BattleControls
        m_BattleControls = asset.FindActionMap("BattleControls", throwIfNotFound: true);
        m_BattleControls_Move = m_BattleControls.FindAction("Move", throwIfNotFound: true);
        m_BattleControls_Shoot = m_BattleControls.FindAction("Shoot", throwIfNotFound: true);
        m_BattleControls_Throw = m_BattleControls.FindAction("Throw", throwIfNotFound: true);
        m_BattleControls_Use = m_BattleControls.FindAction("Use", throwIfNotFound: true);
        m_BattleControls_LookRotation = m_BattleControls.FindAction("LookRotation", throwIfNotFound: true);
        m_BattleControls_LookRotationController = m_BattleControls.FindAction("LookRotationController", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BattleControls
    private readonly InputActionMap m_BattleControls;
    private List<IBattleControlsActions> m_BattleControlsActionsCallbackInterfaces = new List<IBattleControlsActions>();
    private readonly InputAction m_BattleControls_Move;
    private readonly InputAction m_BattleControls_Shoot;
    private readonly InputAction m_BattleControls_Throw;
    private readonly InputAction m_BattleControls_Use;
    private readonly InputAction m_BattleControls_LookRotation;
    private readonly InputAction m_BattleControls_LookRotationController;
    public struct BattleControlsActions
    {
        private @PlayerControls m_Wrapper;
        public BattleControlsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_BattleControls_Move;
        public InputAction @Shoot => m_Wrapper.m_BattleControls_Shoot;
        public InputAction @Throw => m_Wrapper.m_BattleControls_Throw;
        public InputAction @Use => m_Wrapper.m_BattleControls_Use;
        public InputAction @LookRotation => m_Wrapper.m_BattleControls_LookRotation;
        public InputAction @LookRotationController => m_Wrapper.m_BattleControls_LookRotationController;
        public InputActionMap Get() { return m_Wrapper.m_BattleControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BattleControlsActions set) { return set.Get(); }
        public void AddCallbacks(IBattleControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_BattleControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BattleControlsActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
            @Throw.started += instance.OnThrow;
            @Throw.performed += instance.OnThrow;
            @Throw.canceled += instance.OnThrow;
            @Use.started += instance.OnUse;
            @Use.performed += instance.OnUse;
            @Use.canceled += instance.OnUse;
            @LookRotation.started += instance.OnLookRotation;
            @LookRotation.performed += instance.OnLookRotation;
            @LookRotation.canceled += instance.OnLookRotation;
            @LookRotationController.started += instance.OnLookRotationController;
            @LookRotationController.performed += instance.OnLookRotationController;
            @LookRotationController.canceled += instance.OnLookRotationController;
        }

        private void UnregisterCallbacks(IBattleControlsActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
            @Throw.started -= instance.OnThrow;
            @Throw.performed -= instance.OnThrow;
            @Throw.canceled -= instance.OnThrow;
            @Use.started -= instance.OnUse;
            @Use.performed -= instance.OnUse;
            @Use.canceled -= instance.OnUse;
            @LookRotation.started -= instance.OnLookRotation;
            @LookRotation.performed -= instance.OnLookRotation;
            @LookRotation.canceled -= instance.OnLookRotation;
            @LookRotationController.started -= instance.OnLookRotationController;
            @LookRotationController.performed -= instance.OnLookRotationController;
            @LookRotationController.canceled -= instance.OnLookRotationController;
        }

        public void RemoveCallbacks(IBattleControlsActions instance)
        {
            if (m_Wrapper.m_BattleControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBattleControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_BattleControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BattleControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BattleControlsActions @BattleControls => new BattleControlsActions(this);
    public interface IBattleControlsActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnThrow(InputAction.CallbackContext context);
        void OnUse(InputAction.CallbackContext context);
        void OnLookRotation(InputAction.CallbackContext context);
        void OnLookRotationController(InputAction.CallbackContext context);
    }
}
